/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: '.*:ASSEMBLYQC:SEQKIT_RMDUP' {
        ext.args = '--by-seq --ignore-case'
        ext.prefix = { "${meta.id}.seqkit.rmdup" }
    }

    withName: '.*:GFF3_GT_GFF3_GFF3VALIDATOR_STAT:GT_GFF3' {
        ext.args = '-tidy -retainids'
    }

    withName: '.*:GFF3_GT_GFF3_GFF3VALIDATOR_STAT:GT_STAT' {

        ext.prefix = { "${meta.id}.gt.stat" }

        ext.args = [
            '-genelengthdistri',
            '-genescoredistri',
            '-exonlengthdistri',
            '-exonnumberdistri',
            '-intronlengthdistri',
            '-cdslengthdistri',
            '-addintrons'
        ].join(' ').trim()

        publishDir = [
            path: { "${params.outdir}/genometools_gt_stat" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:ASSEMBLYQC:ASSEMBLATHON_STATS' {
        publishDir = [
            path: { "${params.outdir}/assemblathon_stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:ASSEMBLYQC:GFASTATS' {
        ext.args = '--stats -t --nstar-report'
        publishDir = [
            path: { "${params.outdir}/gfastats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename },
            pattern: '*.assembly_summary'
        ]
    }

    withName: '.*:ASSEMBLYQC:FCS_FCSADAPTOR' {
        ext.args = params.ncbi_fcs_adaptor_empire ? "--${params.ncbi_fcs_adaptor_empire}" : '--prok'

        publishDir = [
            path: { "${params.outdir}/ncbi_fcs_adaptor" },
            mode: params.publish_dir_mode,
            pattern: '*.fcs_adaptor_report.txt'
        ]
    }

    withName: '.*:NCBI_FCS_GX:NCBI_FCS_GX_SCREEN_SAMPLES' {
        publishDir = [
            path: { "${params.outdir}/ncbi_fcs_gx" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:NCBI_FCS_GX:NCBI_FCS_GX_KRONA_PLOT' {
        publishDir = [
            path: { "${params.outdir}/ncbi_fcs_gx" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FASTA_GXF_BUSCO_PLOT:BUSCO_ASSEMBLY' {
        ext.args = '--metaeuk'
        publishDir = [
            path: { "${params.outdir}/busco/fasta" },
            mode: params.publish_dir_mode,
            pattern: 'short_summary.*.txt',
            saveAs: { filename -> "short_summary.specific.${meta.id}.${lineage}.txt" }
        ]
    }

    withName: '.*:FASTA_GXF_BUSCO_PLOT:PLOT_ASSEMBLY' {
        ext.prefix = 'busco_figure'
        publishDir = [
            path: { "${params.outdir}/busco/fasta" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FASTA_GXF_BUSCO_PLOT:EXTRACT_PROTEINS' {
        ext.args = '-y'
    }

    withName: '.*:FASTA_GXF_BUSCO_PLOT:BUSCO_ANNOTATION' {
        ext.args = '--metaeuk'
        publishDir = [
            path: { "${params.outdir}/busco/gff" },
            mode: params.publish_dir_mode,
            pattern: 'short_summary.*.txt',
            saveAs: { filename -> "short_summary.specific.${meta.id}.${lineage}.txt" }
        ]
    }

    withName: '.*:FASTA_GXF_BUSCO_PLOT:PLOT_ANNOTATION' {
        ext.prefix = 'busco_figure'
        publishDir = [
            path: { "${params.outdir}/busco/gff" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FASTA_KRAKEN2:KRAKEN2' {
        publishDir = [
            path: { "${params.outdir}/kraken2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FASTA_KRAKEN2:KRAKEN2_KRONA_PLOT' {
        publishDir = [
            path: { "${params.outdir}/kraken2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FASTA_SYNTENY:CIRCOS' {
        publishDir = [
            path: { "${params.outdir}/synteny/${target_on_ref_seq}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FASTA_SYNTENY:LINEARSYNTENY' {
        publishDir = [
            path: { "${params.outdir}/synteny/${target_on_ref_seq}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FASTA_SYNTENY:CUSTOM_RELABELFASTA' {
        ext.prefix = { "${meta.id}.plotsr" }
    }

    withName: '.*:FASTA_SYNTENY:MINIMAP2_ALIGN' {
        ext.args = '-x asm5 --eqx'
    }

    withName: '.*:FASTA_SYNTENY:SYRI' {
        publishDir = [
            path: { "${params.outdir}/synteny/plotsr" },
            mode: params.publish_dir_mode,
            pattern: '*.error.log'
        ]
    }

    withName: '.*:FASTA_SYNTENY:PLOTSR' {

        ext.args = '-d 600'

        publishDir = [
            path: { "${params.outdir}/synteny/plotsr" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FASTA_EXPLORE_SEARCH_PLOT_TIDK:FILTER_BY_LENGTH' {
        ext.args = params.tidk_filter_by_size ? "-m ${params.tidk_filter_size_bp}" : ''
        ext.prefix = { "${meta.id}.filtered" }
    }

    withName: '.*:FASTA_EXPLORE_SEARCH_PLOT_TIDK:SORT_BY_LENGTH' {
        ext.args = '--quiet --reverse --by-length'
        ext.prefix = { "${meta.id}.sorted" }
    }

    withName: '.*:FASTA_EXPLORE_SEARCH_PLOT_TIDK:TIDK_EXPLORE' {
        ext.args = '--minimum 5 --maximum 30'
        publishDir = [
            path: { "${params.outdir}/tidk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FASTA_EXPLORE_SEARCH_PLOT_TIDK:TIDK_SEARCH_APRIORI' {
        ext.prefix = { "${meta.id}.apriori" }
        ext.args = '--extension tsv'
        publishDir = [
            path: { "${params.outdir}/tidk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FASTA_EXPLORE_SEARCH_PLOT_TIDK:TIDK_SEARCH_APOSTERIORI' {
        ext.prefix = { "${meta.id}.aposteriori" }
        ext.args = '--extension tsv'
        publishDir = [
            path: { "${params.outdir}/tidk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FASTA_EXPLORE_SEARCH_PLOT_TIDK:TIDK_PLOT_APRIORI' {
        ext.prefix = { "${meta.id}.apriori" }
        publishDir = [
            path: { "${params.outdir}/tidk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FASTA_EXPLORE_SEARCH_PLOT_TIDK:TIDK_PLOT_APOSTERIORI' {
        ext.prefix = { "${meta.id}.aposteriori" }
        publishDir = [
            path: { "${params.outdir}/tidk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FASTA_LTRRETRIEVER_LAI:UNMASK_IF_ANY' {
        ext.args = '-u'
    }

    withName: '.*:FASTA_LTRRETRIEVER_LAI:CUSTOM_SHORTENFASTAIDS' {
        publishDir = [
            path: { "${params.outdir}/lai" },
            mode: params.publish_dir_mode,
            pattern: '*.short.ids.tsv'
        ]
    }

    withName: '.*:FASTA_LTRRETRIEVER_LAI:LTRHARVEST' {
        ext.prefix = { "${meta.id}_ltrharvest" }
    }

    withName: '.*:FASTA_LTRRETRIEVER_LAI:LTRFINDER' {
        ext.args = '-harvest_out -size 1000000 -time 300'
    }

    withName: '.*:FASTA_LTRRETRIEVER_LAI:CAT_CAT' {
        ext.prefix = { "${meta.id}_ltrharvest_ltrfinder.tabout" }
    }

    withName: '.*:FASTA_LTRRETRIEVER_LAI:LTRRETRIEVER_LTRRETRIEVER' {
        publishDir = [
            path: { "${params.outdir}/lai" },
            mode: params.publish_dir_mode,
            pattern: '*.LTRlib.fa'
        ]
    }

    withName: '.*:FASTA_LTRRETRIEVER_LAI:CUSTOM_RESTOREGFFIDS' {
        publishDir = [
            path: { "${params.outdir}/lai" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FASTA_LTRRETRIEVER_LAI:LTRRETRIEVER_LAI' {
        publishDir = [
            path: { "${params.outdir}/lai" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FQ2HIC:FASTQ_FASTQC_UMITOOLS_FASTP:FASTQC_RAW' {
        publishDir = [
            path: { "${params.outdir}/hic/fastqc_raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FQ2HIC:FASTQ_FASTQC_UMITOOLS_FASTP:FASTQC_TRIM' {
        publishDir = [
            path: { "${params.outdir}/hic/fastqc_trim" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FQ2HIC:FASTQ_FASTQC_UMITOOLS_FASTP:FASTP' {
        ext.args = params.hic_fastp_ext_args
        publishDir = [
            path: { "${params.outdir}/hic/fastp" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FQ2HIC:SEQKIT_REPLACE' {
        ext.prefix  = { "${meta.id}.prefixed" }
        ext.suffix  = 'fasta'
        ext.args    = { "-p ^ -r ${meta.id}_" }
    }

    withName: '.*:FQ2HIC:SEQKIT_SORT' {
        ext.args = '--ignore-case --natural-order'
    }

    withName: '.*:FQ2HIC:FASTQ_BWA_MEM_SAMBLASTER:BWA_MEM' {
        ext.prefix = { "${meta.id}.on.${meta.ref_id}.bwa.mem" }
        ext.args = '-5SP'
    }

    withName: '.*:FQ2HIC:FASTQ_BWA_MEM_SAMBLASTER:SAMBLASTER' {
        ext.prefix = { "${meta.id}.on.${meta.ref_id}.samblaster" }
        ext.args3 = [
            '-h',
            params.hic_samtools_ext_args ? params.hic_samtools_ext_args.split("\\s(?=-+)") : ''
        ].flatten().unique(false).join(' ').trim()
    }

    withName: '.*:FQ2HIC:AGP2ASSEMBLY' {
        publishDir = [
            path: { "${params.outdir}/hic/assembly" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FQ2HIC:ASSEMBLY2BEDPE' {
        publishDir = [
            path: { "${params.outdir}/hic/bedpe" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FQ2HIC:HIC2HTML' {
        publishDir = [
            path: { "${params.outdir}/hic" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FQ2HIC:HICQC' {
        publishDir = [
            path: { "${params.outdir}/hic/hicqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FQ2HIC:RUNASSEMBLYVISUALIZER' {
        publishDir = [
            path: { "${params.outdir}/hic" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:ASSEMBLYQC:TAG_ASSEMBLY' {
        ext.prefix = { "${meta.id}.fasta" }
    }

    withName: '.*:ASSEMBLYQC:MERQURY_MERQURY' {
        publishDir = [
            [
                path: { "${params.outdir}/merqury/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
            ]
        ]
    }

    withName: '.*:ASSEMBLYQC:CREATEREPORT' {
        publishDir = [
            [
                path: { "$params.outdir" },
                mode: params.publish_dir_mode,
                pattern: 'report.json',
                contentType: 'application/json'
            ],
            [
                path: { "$params.outdir" },
                mode: params.publish_dir_mode,
                pattern: 'report.html',
                contentType: 'text/html'
            ]
        ]
    }
}
